package com.example.demo.service;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.stream.Stream;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.example.demo.Repository.CityRepo;
import com.example.demo.Repository.CountryRepo;
import com.example.demo.Repository.StateRepo;
import com.example.demo.Repository.UserRepo;
import com.example.demo.binding.LoginForm;
import com.example.demo.binding.UnlockAccFrom;
import com.example.demo.binding.UserForm;
import com.example.demo.entity.City;
import com.example.demo.entity.Country;
import com.example.demo.entity.State;
import com.example.demo.entity.User;
import com.example.demo.utils.EmailUtils;

@Service
public class UserServiceImpl implements IUserService {

	private CityRepo cityrepo;
	private StateRepo staterepo;
	private CountryRepo countryrepo;
	private UserRepo userrepo;
	private EmailUtils emailutile;


	public UserServiceImpl(CityRepo cityrepo, StateRepo staterepo, CountryRepo countryrepo, UserRepo userrepo,
			EmailUtils emailutile) {
		super();
		this.cityrepo = cityrepo;
		this.staterepo = staterepo;
		this.countryrepo = countryrepo;
		this.userrepo = userrepo;
		this.emailutile = emailutile;
	}

	@Override
	public String registerUser(UserForm user) {
		String uniqueEmail = checkUniqueEmail(user.getEmail());
		if(uniqueEmail.equals("UNIQUE")) {
		User user2 = new User();
		BeanUtils.copyProperties(user, user2);
		user2.setPassword(generatepassword());
		user2.setAcc_status("Locked");
//       todo link
      userrepo.save(user2);
      String to=user.getEmail();
      String subject="Registration Unlock account";
      String body=readEmailBody(user2);  
      System.out.println(body);
      emailutile.sendEmail(to, subject, body);
		return "email sent to register account";
		}
		return "email already exists";
	}



	@Override
	public String loginUser(LoginForm loginform) {
		User login = userrepo.findByEmailAndPassword(loginform.getEmail(),loginform.getPassword());
		if (login == null) {
			return "Invalid credentials";
		}
		if (login.getAcc_status().equals("Locked")) {
			return "Locked";
		}
		return "Sucessfull";
	}

	@Override
	public String forgotpwd(String email) {
		User user = userrepo.findByEmail(email);
		if (user == null) {
			return "User not found";
		}
		String subject="Registration Email";
	      String body=readEmailBody(user);   
	      emailutile.sendEmail(email, subject, body);

		return  "password sent to register account";
	}

	@Override
	public String checkUniqueEmail(String email) {
		  User user = userrepo.findByEmail(email);
		  if(user==null) {
			  return "UNIQUE";
		  }
		return "DUPLICATE";
	}

	@Override
	public Map<Integer, String> getCountries() {
		List<Country> country = countryrepo.findAll();
		HashMap<Integer, String> countrymap = new HashMap<>();
		country.forEach(list -> {
			countrymap.put(list.getCountryid(), list.getCountryname());
		});
		return countrymap;
	}

	@Override
	public Map<Integer, String> getStates(Integer countryid) {
		List<State> states = staterepo.findByCountryid(countryid);
		HashMap<Integer, String> stateMap = new HashMap<>();
		states.forEach(list -> {
			stateMap.put(list.getStateid(), list.getStatename());
		});
		return stateMap;
	}

	@Override
	public Map<Integer, String> getCities(Integer stateid) {
		List<City> cities = cityrepo.findByStateid(stateid);
		HashMap<Integer, String> CityMap = new HashMap<>();
		cities.forEach(list -> {
			CityMap.put(list.getCityid(), list.getCityname());
		});
		return CityMap;
	}

	@Override
	public String unlockAccount(UnlockAccFrom accForm) {
                 String email = accForm.getEmail();
                 User user = userrepo.findByEmail(email);
                 if(user!=null&&accForm.getOldpassword().equals(user.getPassword())) {
                	 user.setPassword(accForm.getNewpassword());
                	 user.setAcc_status("UNLOCKED");
                	 userrepo.save(user);
                	 return "Account Unlocked";
                 }
		return "Invalid temporary password";
	}
	
	
	private String generatepassword() {
		String text = "abcdefghikjlmnopqrstuvwx@%&123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		StringBuilder sb = new StringBuilder();
		int length = 10;
		Random random = new Random();
		for (int i = 1; i <=length; i++) {
			int index = random.nextInt(text.length());
			sb.append(text.charAt(index));

		}
		System.out.println(sb);
		return sb.toString();
	}
	
	private String readEmailBody(User user){
		
		String msg=" Hi "+ user.getFname()+" "+user.getLname() +", <br/>\r\n"
				+ " This mail is auto generated by computer and dont share the password to any one. <br/>\r\n"
				+ " please unlock your account using below details.<br/>\r\n"
				+ " Temporary pwd: "+user.getPassword()+""
				 +"<a href=http://localhost:4200/unlock?email="+user.getEmail()+">Click here to unlock</a><br/>"
				+ " Thanks,<br/>\r\n"
				+ " By Rustam.";
		System.err.println(msg);
//		StringBuffer sb = new StringBuffer();
//		 try(Stream<String> lines=Files.lines(Paths.get(filename))){
//			 lines.forEach(line->{
//				 line.replace("${FNAME}", user.getFname());
//				 line.replace("${LNAME}", user.getLname());
//				 line.replace("${TEMP_PWD}", user.getPassword());
//				 line.replace("${EMAIL}", user.getEmail());
//				 line.replace("${PWD}", user.getPassword());
//				 sb.append(line);
//				 
//			 });
//		 }catch (Exception e) {
//			 e.printStackTrace();
//		 } 
//		 return sb.toString();
		
		return msg;
	}

}
